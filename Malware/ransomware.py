import os
import sys
import subprocess
from cryptography.fernet import Fernet as F


def generate_key():
    key = F.generate_key()
    with open("encryption_key.key", "wb") as key_file:
        key_file.write(key)
    return key


def encrypt_file(file_path, key):
    with open(file_path, "rb") as f:
        data = f.read()

    cipher_suite = F(key)
    encrypted_data = cipher_suite.encrypt(data)

    encrypted_file_path = file_path + ".encrypted"
    with open(encrypted_file_path, "wb") as f:
        f.write(encrypted_data)
    os.remove(file_path)

    print(f"File '{file_path}' encrypted successfully as '{encrypted_file_path}'.")


def decrypt_file(file_path, key):
    with open(file_path, "rb") as f:
        data = f.read()

    cipher_suite = F(key)
    decrypted_data = cipher_suite.decrypt(data)
    decrypted_file_path = os.path.splitext(file_path)[0]
    with open(decrypted_file_path, "wb") as f:
        f.write(decrypted_data)
    os.remove(file_path)

    print(f"File '{file_path}' decrypted successfully as '{decrypted_file_path}'.")


def encrypt_directory(directory_path, key):
    for root, dirs, files in os.walk(directory_path):
        for file in files:
            file_path = os.path.join(root, file)
            encrypt_file(file_path, key)


def decrypt_directory(directory_path, key):
    for root, dirs, files in os.walk(directory_path):
        for file in files:
            file_path = os.path.join(root, file)
            if file_path.endswith(".encrypted"):
                decrypt_file(file_path, key)


if __name__ == "__main__":
    directory_path = ""  # Define directory_path here

    if len(sys.argv) == 1 or sys.argv[1] == "-e":
        # Encryption mode
        key = generate_key()
        encrypt_directory(directory_path, key)

    elif sys.argv[1] == "-d":
        # Decryption mode
        if len(sys.argv) < 3:
            print("Please provide the decryption key file.")
            sys.exit(1)
        decryption_key_file = sys.argv[2]
        print("Decryption key file:", decryption_key_file)  # Debug print
        if not os.path.exists(decryption_key_file):
            print("The provided decryption key file does not exist.")
            sys.exit(1)
        with open(decryption_key_file, "rb") as key_file:
            key = key_file.read()
        decrypt_directory(directory_path, key)
    else:
        print("Invalid argument. Use '-e' for encryption or '-d' for decryption.")
